---
alwaysApply: true
---

# Cursor Rules for Dev Portfolio V1

## Project Overview

This is a personal developer portfolio built with Next.js 15, React 19, TypeScript, and Tailwind CSS. The project features a modern design with dark/light theme support and responsive layout.

## Technology Stack

- **Framework**: Next.js 15.5.2 (App Router)
- **Language**: TypeScript 5 (strict mode)
- **Styling**: Tailwind CSS 4
- **UI Components**: Radix UI + shadcn/ui
- **Icons**: Lucide React
- **Theme**: next-themes for dark/light mode
- **Package Manager**: pnpm

## Code Style & Conventions

### TypeScript

- Use strict TypeScript configuration
- Prefer explicit type annotations for function parameters and return types
- Use `Readonly<T>` for props interfaces when appropriate
- Import types with `import type` syntax

### React Components

- Use functional components with hooks
- Add `"use client"` directive for client-side components
- Use proper TypeScript interfaces for component props
- Follow React 19 best practices

### File Structure

- Use `@/` path alias for imports (configured in tsconfig.json)
- Place components in `components/` directory
- UI components go in `components/ui/`
- Utilities in `lib/` directory
- Pages in `app/` directory (App Router)

### Styling

- Use Tailwind CSS classes exclusively
- Use the `cn()` utility function from `@/lib/utils` for conditional classes
- Follow the established color scheme using CSS custom properties
- Support both light and dark themes
- Use responsive design patterns (mobile-first)

### Component Patterns

- Use Radix UI primitives for accessible components
- Implement shadcn/ui component patterns
- Use class-variance-authority (cva) for component variants
- Follow the established button component pattern for new UI components

### Naming Conventions

- Use PascalCase for components and interfaces
- Use camelCase for variables and functions
- Use kebab-case for CSS classes (handled by Tailwind)
- Use descriptive names that reflect component purpose

### Comments & Documentation

- Write comments in Chinese when explaining business logic
- Use JSDoc comments for complex functions
- Keep comments concise and meaningful

### Performance

- Use Next.js Image component for optimized images
- Implement proper loading states
- Use React.memo() for expensive components when needed
- Follow Next.js 15 best practices for performance

### Accessibility

- Use semantic HTML elements
- Implement proper ARIA attributes
- Ensure keyboard navigation support
- Follow WCAG guidelines

### State Management

- Use React hooks (useState, useEffect) for local state
- Keep state as close to where it's used as possible
- Use proper dependency arrays in useEffect

### Error Handling

- Implement proper error boundaries
- Use try-catch blocks for async operations
- Provide meaningful error messages

## Specific Guidelines

### Theme Implementation

- Use next-themes for theme switching
- Support system theme preference
- Use CSS custom properties for colors
- Ensure smooth theme transitions

### Responsive Design

- Mobile-first approach
- Use Tailwind breakpoints consistently
- Test on various screen sizes
- Implement proper mobile navigation

### Component Architecture

- Keep components small and focused
- Use composition over inheritance
- Implement proper prop drilling alternatives
- Follow single responsibility principle

## Common Patterns

### Button Component Usage

```tsx
import { Button } from "@/components/ui/button";

<Button variant="default" size="default">
  Click me
</Button>;
```

### Conditional Styling

```tsx
import { cn } from "@/lib/utils";

<div className={cn(
  "base-classes",
  condition && "conditional-classes"
)}>
```

### Client Component

```tsx
"use client";
import { useState } from "react";

export default function MyComponent() {
  const [state, setState] = useState();
  // component logic
}
```

## Avoid

- Inline styles (use Tailwind classes)
- Any CSS-in-JS solutions
- Non-semantic HTML elements
- Hardcoded colors (use CSS custom properties)
- Complex prop drilling
- Unnecessary re-renders

## Testing & Quality

- Follow ESLint rules (Next.js + TypeScript)
- Ensure TypeScript compilation passes
- Test responsive behavior
- Verify theme switching works correctly
- Check accessibility compliance

# Cursor Rules for Dev Portfolio V1

## Project Overview

This is a personal developer portfolio built with Next.js 15, React 19, TypeScript, and Tailwind CSS. The project features a modern design with dark/light theme support and responsive layout.

## Technology Stack

- **Framework**: Next.js 15.5.2 (App Router)
- **Language**: TypeScript 5 (strict mode)
- **Styling**: Tailwind CSS 4
- **UI Components**: Radix UI + shadcn/ui
- **Icons**: Lucide React
- **Theme**: next-themes for dark/light mode
- **Package Manager**: pnpm

## Code Style & Conventions

### TypeScript

- Use strict TypeScript configuration
- Prefer explicit type annotations for function parameters and return types
- Use `Readonly<T>` for props interfaces when appropriate
- Import types with `import type` syntax

### React Components

- Use functional components with hooks
- Add `"use client"` directive for client-side components
- Use proper TypeScript interfaces for component props
- Follow React 19 best practices

### File Structure

- Use `@/` path alias for imports (configured in tsconfig.json)
- Place components in `components/` directory
- UI components go in `components/ui/`
- Utilities in `lib/` directory
- Pages in `app/` directory (App Router)

### Styling

- Use Tailwind CSS classes exclusively
- Use the `cn()` utility function from `@/lib/utils` for conditional classes
- Follow the established color scheme using CSS custom properties
- Support both light and dark themes
- Use responsive design patterns (mobile-first)

### Component Patterns

- Use Radix UI primitives for accessible components
- Implement shadcn/ui component patterns
- Use class-variance-authority (cva) for component variants
- Follow the established button component pattern for new UI components

### Naming Conventions

- Use PascalCase for components and interfaces
- Use camelCase for variables and functions
- Use kebab-case for CSS classes (handled by Tailwind)
- Use descriptive names that reflect component purpose

### Comments & Documentation

- Write comments in Chinese when explaining business logic
- Use JSDoc comments for complex functions
- Keep comments concise and meaningful

### Performance

- Use Next.js Image component for optimized images
- Implement proper loading states
- Use React.memo() for expensive components when needed
- Follow Next.js 15 best practices for performance

### Accessibility

- Use semantic HTML elements
- Implement proper ARIA attributes
- Ensure keyboard navigation support
- Follow WCAG guidelines

### State Management

- Use React hooks (useState, useEffect) for local state
- Keep state as close to where it's used as possible
- Use proper dependency arrays in useEffect

### Error Handling

- Implement proper error boundaries
- Use try-catch blocks for async operations
- Provide meaningful error messages

## Specific Guidelines

### Theme Implementation

- Use next-themes for theme switching
- Support system theme preference
- Use CSS custom properties for colors
- Ensure smooth theme transitions

### Responsive Design

- Mobile-first approach
- Use Tailwind breakpoints consistently
- Test on various screen sizes
- Implement proper mobile navigation

### Component Architecture

- Keep components small and focused
- Use composition over inheritance
- Implement proper prop drilling alternatives
- Follow single responsibility principle

## Common Patterns

### Button Component Usage

```tsx
import { Button } from "@/components/ui/button";

<Button variant="default" size="default">
  Click me
</Button>;
```

### Conditional Styling

```tsx
import { cn } from "@/lib/utils";

<div className={cn(
  "base-classes",
  condition && "conditional-classes"
)}>
```

### Client Component

```tsx
"use client";
import { useState } from "react";

export default function MyComponent() {
  const [state, setState] = useState();
  // component logic
}
```

## Avoid

- Inline styles (use Tailwind classes)
- Any CSS-in-JS solutions
- Non-semantic HTML elements
- Hardcoded colors (use CSS custom properties)
- Complex prop drilling
- Unnecessary re-renders

## Testing & Quality

- Follow ESLint rules (Next.js + TypeScript)
- Ensure TypeScript compilation passes
- Test responsive behavior
- Verify theme switching works correctly
- Check accessibility compliance
